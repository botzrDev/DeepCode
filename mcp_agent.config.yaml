$schema: ./schema/mcp-agent.config.schema.json

# Default search server configuration
# Options: "brave" or "bocha-mcp"
default_search_server: "brave"

# Planning mode configuration
# Options: "segmented" or "traditional"
# segmented: Breaks down large tasks to avoid token truncation (recommended)
# traditional: Uses parallel agents but may hit token limits
planning_mode: "traditional"

# Document segmentation configuration
document_segmentation:
  enabled: false  # Whether to use intelligent document segmentation
  size_threshold_chars: 50000  # Document size threshold (in characters) to trigger segmentation
  # If document size > threshold and enabled=true, use segmentation workflow
  # If document size <= threshold or enabled=false, use traditional full-document reading

# Workflow configuration
workflow:
  default_mode: "auto"  # auto, deepcode, zenalto, hybrid
  auto_detection: true
  fallback_mode: "deepcode"

# Workflow routing configuration
workflow_routing:
  default_mode: "auto"
  confidence_threshold: 0.7
  ambiguous_case_default: "deepcode"
  enable_hybrid: true
  cache_decisions: true
  cache_ttl: 300

# ZENALTO-specific configuration
zenalto:
  platforms:
    twitter:
      enabled: true
      rate_limit: 300
      default_tone: "professional"
    linkedin:
      enabled: true
      rate_limit: 100
      default_tone: "professional"
    instagram:
      enabled: true
      rate_limit: 200
      default_tone: "casual"
    facebook:
      enabled: true
      rate_limit: 25
      default_tone: "friendly"
    youtube:
      enabled: true
      rate_limit: 2
      default_tone: "engaging"
  
  content_generation:
    max_length:
      twitter: 280
      linkedin: 3000
      instagram: 2200
      facebook: 63206
      youtube: 5000
    default_hashtags: 5
    ai_model: "anthropic/claude-3.5-sonnet"
  
  analytics:
    enabled: true
    tracking_period: "30d"
    performance_metrics: ["engagement_rate", "reach", "impressions", "clicks"]
  
  scheduling:
    enabled: true
    optimal_times:
      twitter: ["9:00", "13:00", "17:00"]
      instagram: ["11:00", "18:00"]
      linkedin: ["9:00", "14:00"]
      facebook: ["15:00", "19:00"]
      youtube: ["16:00", "20:00"]

execution_engine: asyncio
logger:
  transports: [console, file]
  level: info
  progress_display: true
  path_settings:
    path_pattern: "logs/mcp-agent-{unique_id}.jsonl"
    unique_id: "timestamp" # Options: "timestamp" or "session_id"
    timestamp_format: "%Y%m%d_%H%M%S"



mcp:
  servers:
    brave:
      # On windows replace the command and args line to use `node` and the absolute path to the server.
      # Use `npm i -g @modelcontextprotocol/server-brave-search` to install the server globally.
      # Use `npm -g root` to find the global node_modules path.`
      # command: "node"
      # args: ["c:/Program Files/nodejs/node_modules/@modelcontextprotocol/server-brave-search/dist/index.js"]
      command: "npx"
      args: ["-y", "@modelcontextprotocol/server-brave-search"]
      env:
        # You can also place your BRAVE_API_KEY in the fastagent.secrets.yaml file.
        BRAVE_API_KEY: ""
    filesystem:
      # On windows update the command and arguments to use `node` and the absolute path to the server.
      # Use `npm i -g @modelcontextprotocol/server-filesystem` to install the server globally.
      # Use `npm -g root` to find the global node_modules path.`
      # command: "node"
      # args: ["c:/Program Files/nodejs/node_modules/@modelcontextprotocol/server-filesystem/dist/index.js","."]
      command: "npx"
      args: ["-y", "@modelcontextprotocol/server-filesystem"]
    fetch:
      command: "uvx"
      args: ["mcp-server-fetch"]
    social-media:
      command: "python"
      args: ["tools/social_media_server.py"]
      env:
        PYTHONPATH: "."
      description: "Social media platform integration server - provides posting, analytics, and scheduling tools"
    content-intent-analysis:
      command: "python"
      args: ["tools/content_intent_server.py"]
      env:
        PYTHONPATH: "."
      description: "Content intent analysis server - analyzes user requests for social media content creation"

openai:
  # Secrets (API keys, etc.) are stored in an mcp_agent.secrets.yaml file which can be gitignored
  #  default_model: "o3-mini"
  default_model: "anthropic/claude-3.5-sonnet"


anthropic:
